"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs_1 = require("fs");
const utils = require("./utils");
const parser = require("./parser");
const glob = require("glob");
function resolveCapabilities(capsLocation, runType, projectDir, verbose = false) {
    let caps;
    const customCapabilitiesConfigs = searchCapabilities(capsLocation, projectDir, verbose);
    ;
    if (customCapabilitiesConfigs) {
        const customCapabilities = JSON.parse(customCapabilitiesConfigs + "");
        utils.log(customCapabilities, verbose);
        caps = customCapabilities[runType];
        if (!caps) {
        }
    }
    else {
        throw new Error("No capabilities found!!!");
    }
    return caps;
}
exports.resolveCapabilities = resolveCapabilities;
function searchCapabilities(capabilitiesLocation, projectDir, verbose = false) {
    if (utils.isFile(capabilitiesLocation)) {
        return seCapabilities(capabilitiesLocation);
    }
    console.log(`Search capabilities in ${capabilitiesLocation}`);
    let customCapabilitiesLocation = sreachCapabilitiesByFolder(capabilitiesLocation);
    if (!customCapabilitiesLocation || customCapabilitiesLocation.length === 0) {
        console.log(`Search capabilities in ${projectDir}`);
        customCapabilitiesLocation = sreachCapabilitiesByFolder(projectDir);
    }
    if (!customCapabilitiesLocation || customCapabilitiesLocation.length === 0) {
        console.log(`Search capabilities in ${path_1.dirname(projectDir)}`);
        customCapabilitiesLocation = sreachCapabilitiesByFolder(path_1.dirname(projectDir));
    }
    if (customCapabilitiesLocation && customCapabilitiesLocation.length > 0 && utils.fileExists(customCapabilitiesLocation)) {
        return seCapabilities(customCapabilitiesLocation[0]);
    }
    throw Error("No capabilities found!!!");
}
exports.searchCapabilities = searchCapabilities;
const sreachCapabilitiesByFolder = (location) => {
    const capabiliteFiles = glob.sync(path_1.join(location, "/**/", parser.capabilitiesName));
    console.log('Found files:', capabiliteFiles);
    return capabiliteFiles[0];
};
const seCapabilities = appiumCapabilitiesLocation => {
    const file = fs_1.readFileSync(appiumCapabilitiesLocation);
    process.env.APPIUM_CAPABILITIES = file;
    utils.log("Capabilities found at: " + appiumCapabilitiesLocation, true);
    return file;
};
//# sourceMappingURL=capabilities-helper.js.map